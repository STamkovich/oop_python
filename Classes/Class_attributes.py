# 1.2 Атрибуты класса!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# данные которые мы закладываем внутрь класса являются обычными переменными которые мы опеределяем именно внутри класса


class Person:
    name = 'Ivan'
    age = 30
# что бы обратиться к атрибутам класса и получить его значение
# нужно в консоле ввести название класса поставить точку и выбрать атрибут
# что бы посмотреть все атрибуты в классе нужно в консоле ввести Person.__dict__
# вся эта структура называется mappinproxy
# так же что бы обращаться к отрубуту класса припомощи функции getattr(Person, 'name') первым параметром передаётся объект
# вторым название  атрибута
# название нужно указывать ввиде строки
# в случае когда мы обращаемся к атрибуту которого в классе нет то мы получим ошибку, но функция getattr позволяет
# нам передать третий параметр
# это значение котрое вернётся к нам по умолчаению если у нас нет такого атрибута и она его сохроняет этот атрибут
# в mappinproxy
# и после этого мы его там можем уже изменять

# изменения значения атрибутов
# нужно обратиться к отрибуту который у нас имеетсья и просто присваеваете ему значение
Person.name = 'Misha'
# так же значение атрибутов мы можем устанавливать при помощти функции setattr(Person, 'x', 200)
# так при помощи этой функции мы может создавать новые атрибуты для этого класса setattr(Person, 'е', 20)

# удаление атрибутов
#  нужно написать команду del а затем имя атрибута который выхотите удалить
del Person.е
# так же существует всттроенная функция delattr(Person, 'e')


# ВАЖНОЕ  Добавление атрибутов класса влияет на отражение атребутов экземпляров


# 1.3 Атрибуты экземпляра класс!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# У экземпляров класса так же можно посмотреть их атрибуты через переменную __dict__
# это атрубут экземпляра класса появиться только в назнгченем экземплчре класса
# class Car:
# ...     model = 'BMW'
# ...     engine = 2.0
# ...
# a1 = Car()
# a2 = Car()
# Car.__dict__
# mappingproxy({'__module__': '__main__', 'model': 'BMW', 'engine': 2.0, '__dict__': <attribute '__dict__' of 'Car' objects>, '__weakref__': <attribute '__weakref__' of 'Car' objects>, '__doc__': None})
# a2.engine
# 2.0
# a1.__dict__
# {}
# a1.seat = 4

# 1.4 Функции как атрибут класса!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
class Car:
    model = 'BMW'
    engine = 2.0
    def driwe():
        print("Let's go")

# что бы обратитсья к атрибуту через функцию getattr нужно в консоле ввести getattr(Car, 'drive')
# такое обращение аналогично Car.drive  ичто бы сработал прикнт нужно после обращения поставить - ()
# тоесть сделать вызов нашей функции
#  данная функция вызывает черес класс
# a.driwe
# <bound method Car.driwe of <__main__.Car object at 0x7f843c7affd0>>
# Car.driwe
# <function Car.driwe at 0x7f843c8daa60>
#  тоеесть для экземпляра ка\ласса это метод а для класса это функция
# что бы вызвать функцию от экземпляра класса нужно использовать декораторы.
# @ staticmethod
# @ classmethod


