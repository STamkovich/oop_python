# 3.1 Магические методы. Методы __str__ и __repr__
# Оба эти методы отвечают за текствовое отображение в системе
#  метод repr  отвечает как наш экземпляр класса будет отображатся внутри нашей системы тоесть как её будут
#  видеть разработчики
#  а  метод str будет отвечать за то как наш обект будет отаброжён если к нему пременить функции как str или print
#  другими словами он отвечает как увидят этот обект пользователи

class Lion:

    def __init__(self, name):
        self.name = name

    def __repr__(self):
        return f'The objec Lion - {self.name}'

    def __str__(self):
        return f' Lion - {self.name}'

# задачки
# Создайте класс Person, у которого есть:
# конструктор __init__, принимающий 3 аргумента: name, surname, gender.
# Атрибут gender может принимать только 2 значения: "male" и "female", по умолчанию "male".
# Если в атрибут gender передается любое другое значение, печатать сообщение: "Не знаю, что вы имели ввиду?
# Пусть это будет мальчик!" и проставить атрибут gender значением "male"
# переопределить метод __str__ следующим образом:
# если объект - мужчина (атрибут gender = "male"), возвращать строку "Гражданин <Фамилия> <Имя>
# если объект - женщина (атрибут gender = "female"), возвращать строку "Гражданка <Фамилия> <Имя>

class Person:

    def __init__(self, name, surname, gender='male'):
        self.name = name
        self.surname = surname
        self.gender = gender
        if gender != "male" and gender != 'female':
            print("Не знаю, что вы имели ввиду? Пусть это будет мальчик!")
            self.gender = 'male'

    def __str__(self):
        if self.gender == 'male':
            return f'Гражданин {self.surname} {self.name}'
        else:
            return f'Гражданка {self.surname} {self.name}'


# оздайте класс Vector, который хранит в себе вектор целых чисел.  У класса Vector есть:
#
# конструктор __init__, принимающий произвольное количество аргументов.
# Среди всех переданных аргументов необходимо оставить только целые числа и сохранить их в атрибут values в виде списка;
# переопределить метод __str__ так, чтобы экземпляр класса Vector выводился следующим образом:
# "Вектор(<value1>, <value2>, <value3>, ...)", если вектор не пустой.
# При этом значения должны быть упорядочены по возрастанию (будьте аккуратнее с пробелами,
# они стоят только после запятых, см. пример ниже);
# "Пустой вектор", если наш вектор не хранит в себе значения

class Vector:

    def __init__(self, *args):
        self.value = args
        self.values = []
        for n in args:
            if isinstance(n, int):
                self.values.append(n)

    def __str__(self):
        if len(self.values) > 0:
            return f'Вектор{tuple(sorted(self.values))}'
        else:
            return f"Пустой вектор"
